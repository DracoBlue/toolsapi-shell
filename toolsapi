#!/bin/bash

#
# toolsapi shell client version 1.x-dev
#
# This work is copyright by DracoBlue (<http://dracoblue.net>) and not licensed under any license, yet.
#

COMMAND=$1
CURL_COMMAND=curl
GREP_COMMAND=grep
CAT_COMMAND=cat
CUT_COMMAND=cut
TAIL_COMMAND=tail
POSSIBLE_FILES="toolsapi.properties $HOME/toolsapi.properties /etc/toolsapi.properties"

for possible_file in $POSSIBLE_FILES
do
    if [ -f $possible_file ]
    then
        POSSIBLE_URL=$($CAT_COMMAND $possible_file | $GREP_COMMAND 'url=' | $TAIL_COMMAND -n 1 | cut -f '2-' -d '=')
        
        if [ ! -z "$POSSIBLE_URL" ]
        then
            if [ -z "$URL" ]
            then
                URL=$POSSIBLE_URL
            fi
        fi

        POSSIBLE_USER_NAME=$($CAT_COMMAND $possible_file | $GREP_COMMAND 'user=' | $TAIL_COMMAND -n 1 | cut -f '2-' -d '=')
        
        if [ ! -z "$POSSIBLE_USER_NAME" ]
        then
            if [ -z "$USER_NAME" ]
            then
                USER_NAME=$POSSIBLE_USER_NAME
            fi
        fi

        POSSIBLE_USER_PASSWORD=$($CAT_COMMAND $possible_file | $GREP_COMMAND 'password=' | $TAIL_COMMAND -n 1 | cut -f '2-' -d '=')
        if [ ! -z "$POSSIBLE_USER_PASSWORD" ]
        then
            if [ -z "$USER_PASSWORD" ]
            then
                USER_PASSWORD=$POSSIBLE_USER_PASSWORD
            fi
        fi
    fi
done

if [ -z "$URL" ]
then
    echo "Cannot find url= in $POSSIBLE_FILES" >&2;
    exit 1;
fi

if [ -z "$USER_NAME" ]
then
    echo "Cannot find user= in $POSSIBLE_FILES" >&2;
    exit 1;
fi

if [ -z "$USER_PASSWORD" ]
then
    echo "Cannot find password= in $POSSIBLE_FILES" >&2;
    exit 1;
fi


if [ -z "$1" ]
then
    FINAL_COMMAND="$CURL_COMMAND -sS -H 'Accept: text/plain' --user ${USER_NAME}:${USER_PASSWORD} -X GET";
    FINAL_COMMAND="${FINAL_COMMAND} ${URL}templates"
    eval $FINAL_COMMAND
    exit 0
fi

if [ ! "${1#*:}" == "$1" ]
then
    TEMPLATE_NAME=${1/*:/}
    TOOL_NAME=${1/:*/}
    TOOLSAPI_COMMAND=$0
#    echo "tool: $TOOLSAPI_COMMAND as $TOOL_NAME with $TEMPLATE_NAME"

    FINAL_COMMAND="$CURL_COMMAND -sS -H 'Accept: application/x-sh' --user ${USER_NAME}:${USER_PASSWORD} -X GET";
    FINAL_COMMAND="${FINAL_COMMAND} ${URL}templates/${TOOL_NAME}-${TEMPLATE_NAME}"

    # remove the template parameter
    shift

    # FIXME: should be converted into a HERE-document (if this is possible!
    PARAMETERS_FILE=$(mktemp /tmp/draft.XXXX)
    eval $FINAL_COMMAND > $PARAMETERS_FILE
#    echo $PARAMETERS_FILE
#    cat $PARAMETERS_FILE
    . $PARAMETERS_FILE
    rm $PARAMETERS_FILE

#    echo "TOOLSAPI_PARAMETERS: $TOOLSAPI_PARAMETERS"
else
    TOOLSAPI_PARAMETERS="$@"
fi

FINAL_COMMAND="$CURL_COMMAND -sS -H 'Accept: text/plain' --user ${USER_NAME}:${USER_PASSWORD} -X POST";

POS="-1"
SUBFILEPOS="-1"

for ARG in $TOOLSAPI_PARAMETERS
do
#    echo "ARG $POS = $ARG"
    if [ "$POS" == "-1" ]
    then
        FINAL_COMMAND="${FINAL_COMMAND} ${URL}tool/${ARG}"
    else
        if [ "toolsapi:inputfile=" == "${ARG:0:19}" ]
        then
            FINAL_COMMAND="${FINAL_COMMAND} -F file${POS}=@'${ARG:19}'"
        elif [ "toolsapi:inputfolder=" == "${ARG:0:21}" ]
        then
            FOLDER_SUBFILES=""
            while read line
            do
                let "SUBFILEPOS += 1"
                FINAL_COMMAND="${FINAL_COMMAND} -F subfile${SUBFILEPOS}=@'${line}'"
                if [ -z "$FOLDER_SUBFILES" ]
                then
                    FOLDER_SUBFILES="${SUBFILEPOS}"
                else
                    FOLDER_SUBFILES="${FOLDER_SUBFILES},${SUBFILEPOS}"
                fi
            done <<EOF
            `find ${ARG:21} -mindepth 1`
EOF
            FINAL_COMMAND="${FINAL_COMMAND} -F folder${POS}=${FOLDER_SUBFILES}"
        else
            FINAL_COMMAND="${FINAL_COMMAND} -F arg${POS}='${ARG}'"
        fi 
    fi
    let "POS += 1"
done

#echo $FINAL_COMMAND
eval $FINAL_COMMAND
